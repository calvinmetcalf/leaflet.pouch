{"ts":1353952333541,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"pouch-leaflet\n===\nthe ability to add a geojson layer to [leaflet](http://leafletjs.com/) that is stored in a [pouchdb](http://pouchdb.com/) you can add it from a remote couchdb that is synced to the local one as conectivity permits, for bonus points and because I'm a massacist, it's written in [CoffeeScript](http://coffeescript.org/)\n\nbasic idea if you do \n\n```javascript\nvar syncLayer = L.geojson.pouch(\"idb://synclayer\", \"http://samehost.com/someDB\", {leaflet: \"options\"}).addTo(map)\n```\nyou get\nmap <-a- indexedDB <-b- couchDB\n\nwith a working if your offline and b should be able to resync if you get disconected and then reconnect\n\nif you change the direcection (default is \"from\") to to e.g.\n\n```javascript\nvar syncLayer = L.geojson.pouch(\"idb://synclayer\", \"http://samehost.com/someDB\", {direction: \"to\"}).addTo(map)\n```\nyou get\n\nmap <-a- indexedDB -b-> couchDB\n\nand you can also do direction both\n\n```javascript\nvar syncLayer = L.geojson.pouch(\"idb://synclayer\", \"http://samehost.com/someDB\", {direction: \"both\"}).addTo(map)\n```\nmap <-a- indexedDB <-b-> couchDB\n\nother option is \"continuous\" which defaults to true, if false then will only sync once\n\nuse layer.sync() to force a sync (this will be helpfull if continuous is false)\n\nother option is layer.cancel() which cancells current replication (only useful if continuous is true)\n\n```coffeescript\ngeojsonMarkerOptions = \n    radius: 8\n    fillColor: \"#ff7800\"\n    color: \"#000\"\n    weight: 1\n    opacity: 1\n    fillOpacity: 0.8\n\nlayer = new L.GeoJSON.Pouch \"idb://SomeName\", \n\tpointToLayer : (feature, latlng) ->\n        L.circleMarker latlng, geojsonMarkerOptions\n    someOther : option\n\nlayer.addTo(map)\n\nlayer.addDoc GeoJSONfeature\n```\nor\n```javascript\nvar layer = L.geojson.pouch(\"idb://SomeName\", \"http://localhost:5984/someDB\").addTo(map)\n//this will sync from remote to browser, there are local storage limits, you could also just do\nvar otherLayer = L.geojson.pouch(\"http://localhost:5984/someDB\").addTo(map)\n```\nvery rought hold tight for demos and stuff, build with\n\n```bash\ncake build\n```"]],"start1":0,"start2":0,"length1":0,"length2":2062}]],"length":2062}
{"contributors":[],"silentsave":false,"ts":1356962023546,"patch":[[{"diffs":[[0,".org/)\n\n"],[1,"api\n---\n\n```javascript\nL.geoJson(localDB, [remoteDB,] [options]);\n```\n\n\n"],[0,"basic id"]],"start1":329,"start2":329,"length1":16,"length2":88},{"diffs":[[0,"yncLayer = L.geo"],[-1,"j"],[1,"J"],[0,"son.pouch(\"idb:/"]],"start1":451,"start2":451,"length1":33,"length2":33},{"diffs":[[0,"ouch(\"idb://"],[-1,"synclayer"],[1,"LocalDB"],[0,"\", \"http://s"]],"start1":473,"start2":473,"length1":33,"length2":31},{"diffs":[[0,"eDB\""],[-1,", {leaflet: \"options\"}"],[0,").ad"]],"start1":519,"start2":519,"length1":30,"length2":8},{"diffs":[[0,"\nyou get"],[-1,"\nmap <-a-"],[1," an"],[0," indexed"]],"start1":539,"start2":539,"length1":25,"length2":19},{"diffs":[[0,"dDB "],[-1,"<-b- couchDB\n\nwith a working if your offline and b should be able to resync if you get disconected and then reconnect\n\nif you change the"],[1,"layer which keeps synced with a couchDB but with the contents stored locally. \n\nyou can pass an option object if you want with both leaflet geojson options and 2 new ones\n\nfirst is"],[0," direc"],[-1,"ec"],[0,"tion"],[1,", it"],[0," "],[-1,"("],[0,"default"],[-1," is"],[1,"s to"],[0," \"from\""],[-1,") to to e.g.\n\n```javascript\nvar syncLayer = L.geojson.pouch(\"idb://synclayer\", \"http://samehost.com/someDB\", {direction: \"to\"}).addTo(map)\n```\nyou get\n\nmap <-a- indexedDB -b-> couchDB\n\nand you can also do direction both\n\n```javascript\nvar syncLayer = L.geojson.pouch(\"idb://synclayer\", \"http://samehost.com/someDB\", {direction: \"both\"}).addTo(map)\n```\nmap <-a- indexedDB <-b-> couchDB\n\nother option is \"continuous\" which defaults to true, if false then will only sync once\n\nuse layer.sync() to force a sync (this will be helpfull if continuous is false)\n\nother option is layer.cancel() which cancells current replication (only useful if co"],[1," which pulles stuff from the remoteDB to the localDB, you can also do \"to\" which is the opposite, localDB to remoteDB and \"both\" which syncs both ways.\n\nother option is \"continuous\" which defaults to true, if false then will only sync when it's created and you'll have to manually sync it. Use layer.sync() to force a sync.\n\nother option is layer.cancel() which cancels current replication.\n\nex in code \n\nthis is in JavaScript and just \n```javascript\nvar layer = L.geoJson.pouch(\"idb://SomeName\", \"http://localhost:5984/someDB\").addTo(map)\n//this will sync from remote to browser, there are local storage limits, you could also just do\nvar otherLayer = L.geoJson.pouch(\"http://localhost:5984/someDB\").addTo(map)\n```\nthis is coffee script and just syncs from a a remote with no localone, the path is reletive to the document if it's an attachme"],[0,"nt"],[1," "],[0,"in"],[-1,"uous is true)\n"],[1," a database"],[0,"\n```"]],"start1":557,"start2":557,"length1":832,"length2":1080},{"diffs":[[0,"N.Pouch "],[-1,"\"idb://SomeName\""],[1,"document.location.protocol+\"//\"+document.location.host+\"/\"+document.location.pathname.split(\"/\")[1]"],[0,", \n\tpoin"]],"start1":1802,"start2":1802,"length1":32,"length2":115},{"diffs":[[0,"```\n"],[-1,"or\n```javascript\nvar layer = L.geojson.pouch(\"idb://SomeName\", \"http://localhost:5984/someDB\").addTo(map)\n//this will sync from remote to browser, there are local storage limits, you could also just do\nvar otherLayer = L.geojson.pouch(\""],[1,"the source of the demo is in it's [own repo]("],[0,"http"],[1,"s"],[0,"://"],[-1,"localhost:5984/someDB\").addTo(map)\n```\nvery rought hold tight for demos and stuff, build with\n"],[1,"github.com/calvinmetcalf/leaf-couch)\n\n```bash\ncake build\n```\nbuild minified version"],[0,"\n```"]],"start1":2071,"start2":2071,"length1":345,"length2":144},{"diffs":[[0,"ersion\n```bash\ncake "],[-1,"build"],[1,"min"],[0,"\n```"],[1,"\n"]],"start1":2205,"start2":2205,"length1":29,"length2":28}]],"length":2233,"saved":false}
{"contributors":[],"silentsave":false,"ts":1357069737652,"patch":[[{"diffs":[[0,"son("],[-1,"localDB, ["],[0,"remo"]],"start1":366,"start2":366,"length1":18,"length2":8},{"diffs":[[0,"eDB,"],[-1,"] "],[0,"[opt"]],"start1":375,"start2":375,"length1":10,"length2":8},{"diffs":[[0,"uch("],[-1,"\"idb://LocalDB\","],[0,""],[1,""],[0," \"ht"]],"start1":462,"start2":462,"length1":24,"length2":8},{"diffs":[[0,"and "],[-1,"2"],[1,"3"],[0," new"]],"start1":689,"start2":689,"length1":9,"length2":9},{"diffs":[[0," ways.\n\n"],[-1,"other"],[1,"second"],[0," option "]],"start1":891,"start2":891,"length1":21,"length2":22},{"diffs":[[0,"c.\n\n"],[-1,"other option"],[1,"third option is \"idbName\" which is the name for the local DB if you don't want to use the dafault, it defaults to whatever the remote database is, if there is no remote db and this isn't defined it defaults to the page name.\n\nother method"],[0," is "]],"start1":1068,"start2":1068,"length1":20,"length2":246}]],"length":2432,"saved":false}
{"contributors":[],"silentsave":false,"ts":1357235050996,"patch":[[{"diffs":[[-1,"pouch-leaflet"],[1,"Leaflet.Pouch"],[0,"\n==="]],"start1":0,"start2":0,"length1":17,"length2":17},{"diffs":[[0,"et a"],[-1,"n indexedDB layer which keeps synced with a couchDB but with the contents stored locally. "],[1," remote couchDB layer, that if IndexedDB is available, stored localy as that, with a fall back to WebSQL and if neither of those are available, just loads the remote db."],[0,"\n\nyo"]],"start1":517,"start2":517,"length1":98,"length2":177},{"diffs":[[0,"r method"],[-1," is"],[1,"s are"],[0," layer.c"]],"start1":1381,"start2":1381,"length1":19,"length2":21},{"diffs":[[0,"tion"],[-1,".\n\nex in code \n\nthis is in JavaScript and just \n```javascript\nvar layer = L.geoJson.pouch(\"idb://SomeName\", \"http://localhost:5984/someDB\").addTo(map)\n//this will sync from remote to browser, there are local storage limits, you could also just do\nvar otherL"],[1,", layer.sync() which does a one time replication, and layer.destroy() which deletes the local db.\n\nex in code \n\nthis is in JavaScript and just \n```javascript\nvar l"],[0,"ayer"]],"start1":1439,"start2":1439,"length1":265,"length2":171}]],"length":2419,"saved":false}
