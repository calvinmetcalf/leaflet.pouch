{"ts":1353429749650,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var Pouch = this.Pouch = function Pouch(name, opts, callback) {\n\n  if (!(this instanceof Pouch)) {\n    return new Pouch(name, opts, callback);\n  }\n\n  if (typeof opts === 'function' || typeof opts === 'undefined') {\n    callback = opts;\n    opts = {};\n  }\n\n  var backend = Pouch.parseAdapter(opts.name || name);\n  opts.name = backend.name;\n  opts.adapter = opts.adapter || backend.adapter;\n\n  if (!Pouch.adapters[backend.adapter]) {\n    throw 'Adapter is missing';\n  }\n\n  if (!Pouch.adapters[backend.adapter].valid()) {\n    throw 'Invalid Adapter';\n  }\n\n  var adapter = Pouch.adapters[backend.adapter](opts, callback);\n  for (var j in adapter) {\n    this[j] = adapter[j];\n  }\n}\n\n\nPouch.parseAdapter = function(name) {\n\n  var match = name.match(/([a-z\\-]*):\\/\\/(.*)/);\n\n  if (match) {\n    // the http adapter expects the fully qualified name\n    name = /http(s?)/.test(match[1]) ? match[1] + '://' + match[2] : match[2];\n    var adapter = match[1];\n    if (!Pouch.adapters[adapter].valid()) {\n      throw 'Invalid adapter';\n    }\n    return {name: name, adapter: match[1]};\n  }\n\n  // the name didnt specify which adapter to use, so we just pick the first\n  // valid one, we will probably add some bias to this (ie http should be last\n  // fallback)\n  for (var i in Pouch.adapters) {\n    if (Pouch.adapters[i].valid()) {\n      return {name: name, adapter: i};\n    }\n  }\n  throw 'No Valid Adapter.';\n}\n\n\nPouch.destroy = function(name, callback) {\n  var opts = Pouch.parseAdapter(name);\n  Pouch.adapters[opts.adapter].destroy(opts.name, callback);\n};\n\n\nPouch.adapters = {};\n\nPouch.adapter = function (id, obj) {\n  Pouch.adapters[id] = obj;\n}\n\n\n// Enumerate errors, add the status code so we can reflect the HTTP api\n// in future\nPouch.Errors = {\n  MISSING_BULK_DOCS: {\n    status: 400,\n    error: 'bad_request',\n    reason: \"Missing JSON list of 'docs'\"\n  },\n  MISSING_DOC: {\n    status: 404,\n    error: 'not_found',\n    reason: 'missing'\n  },\n  REV_CONFLICT: {\n    status: 409,\n    error: 'conflict',\n    reason: 'Document update conflict'\n  },\n  INVALID_ID: {\n    status: 400,\n    error: 'invalid_id',\n    reason: '_id field must contain a string'\n  },\n  RESERVED_ID: {\n    status: 400,\n    error: 'bad_request',\n    reason: 'Only reserved document ids may start with underscore.'\n  },\n  UNKNOWN_ERROR: {\n    status: 500,\n    error: 'unknown_error',\n    reason: 'Database encountered an unknown error'\n  }\n};\n\nif (typeof module !== 'undefined' && module.exports) {\n  global['Pouch'] = Pouch;\n  Pouch.merge = require('./pouch.merge.js').merge;\n  Pouch.collate = require('./pouch.collate.js').collate;\n  Pouch.replicate = require('./pouch.replicate.js').replicate;\n  Pouch.utils = require('./pouch.utils.js');\n  module.exports = Pouch;\n\n  // load adapters known to work under node\n  var adapters = ['leveldb', 'http'];\n  adapters.map(function(adapter) {\n    var adapter_path = './adapters/pouch.'+adapter+'.js';\n    require(adapter_path);\n  });\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2942}]],"length":2942}
