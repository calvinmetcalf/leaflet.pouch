{"ts":1353430486325,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#! /usr/bin/env node\n\n\"use strict\";\n\n// External Deps\nvar webdriver = require('wd');\nvar program = require('commander');\n//var colors = require('colors');\nvar assert = require('assert');\nvar nano = require('nano');\nvar send = require('send');\nvar qunit = require(\"qunit\");\nvar request = require('request');\n\n// Local Deps\nvar cors = require('./tests/CORS-Proxy/server.js');\n\n// Stdlib Deps\nvar path = require('path');\nvar proc = require('child_process');\nvar http = require('http');\nvar util = require('util');\nvar fs = require('fs');\nvar url = require('url');\n\nvar DEFAULT_COUCH_HOST = 'http://127.0.0.1:5984';\nvar DEFAULT_CORS_HOST = 'http://127.0.0.1:2020';\n\nvar POUCH_ROOT = __dirname;\nvar TEST_ROOT = POUCH_ROOT + '/tests';\n\n// Location that we store the log + results about this test run\nvar RESULTS_HOST = 'pouchdb.iriscouch.com';\nvar RESULTS_DB = 'test_results';\n\n// Which build are we testing\nvar TEST_RELEASE = 'release-min';\n\nvar results = nano('http://' + RESULTS_HOST).use(RESULTS_DB);\nvar testDb = nano('http://127.0.0.1:5984').use('test_results');\nvar launchUrl = 'http://127.0.0.1:8000/tests/test.html?test=' + TEST_RELEASE;\n\nvar sauce = {\n  host: 'ondemand.saucelabs.com',\n  port: 80,\n  user: 'pouchdb',\n  key: '97de9ee0-2712-49f0-9b17-4b9751d79073'\n};\n\nvar browserConfig = [{\n  browserName: 'chrome',\n  platform: 'Windows 2003',\n  name: 'win2003/chrome'\n}, {\n  browserName: 'firefox',\n  version: '17',\n  platform: 'Windows 2003',\n  name: 'win2003/firefox'\n}];\n\nvar resultsDoc = {\n  _id: new Date().getTime() + '',\n  started: new Date(),\n  release: TEST_RELEASE,\n  runs: {}\n};\n\nif ('TRAVIS' in process.env) {\n  resultsDoc.branch = process.env.TRAVIS_BRANCH;\n  resultsDoc.travis_job = process.env.TRAVIS_JOB_ID;\n  resultsDoc.pull_request = process.env.TRAVIS_PULL_REQUEST;\n}\n\nvar sauce_connect;\n\nfunction sauceUrl() {\n  return 'https://' + sauce.user + ':' + sauce.key +'@saucelabs.com';\n}\n\nfunction sauceConnections(callback) {\n  var connsUrl = sauceUrl() + '/rest/v1/' + sauce.user + '/tunnels';\n  request({url: connsUrl, json: true}, function(err, resp, body) {\n    callback(body);\n  });\n}\n\nfunction sauceDisconnect(callback) {\n  if (sauce_connect) {\n    sauce_connect.kill('SIGHUP');\n  }\n  sauceConnections(function(conns) {\n    if (!conns.length) {\n      return;\n    }\n    request({\n      method: 'DELETE',\n      url: sauceUrl() + '/rest/v1/' + sauce.user + '/tunnels/' + conns[0]\n    }, function() { callback(); });\n  });\n}\n\nvar PouchTestRunner = (function() {\n\n  var api = {};\n\n  api.init = function(callback) {\n    proc.exec('git rev-list HEAD --max-count=1', function(err, stdout, stderr) {\n      resultsDoc.git_hash = stdout.replace(/[\\n\\r]/g, '');\n      api.initServers();\n      callback();\n    });\n  };\n\n  api.initServers = function(couch) {\n    var couchHost = couch || url.parse(DEFAULT_COUCH_HOST);\n    var corsHost = url.parse(DEFAULT_CORS_HOST);\n\n    console.log('=> Starting file server on: http://127.0.0.1:8000/');\n    http.createServer(function(req, res) {\n      var url = req.url.split('?')[0];\n      send(req, url).root(POUCH_ROOT).pipe(res);\n    }).listen(8000);\n\n    console.log('=> Starting CORS server on:', url.format(corsHost),\n                '=> ', url.format(couchHost));\n    cors.init(couchHost, corsHost);\n  };\n\n  api.sauceConnect = function(callback) {\n    sauceConnections(function(conns) {\n      if (conns.length > 0) {\n        console.log('=> Saucelabs has an active Job running, waiting ...');\n        setTimeout(function() { api.sauceConnect(callback); }, 1000 * 30);\n      } else {\n        api.doSauceConnect(callback);\n      }\n    });\n  };\n\n  api.doSauceConnect = function(callback) {\n    console.log('=> Connecting to Saucelabs ...');\n    var sauce_args = [\n      '-jar',\n      POUCH_ROOT + '/tests/Sauce-Connect.jar',\n      'pouchdb',\n      '97de9ee0-2712-49f0-9b17-4b9751d79073'\n    ];\n    sauce_connect = proc.spawn('java', sauce_args);\n\n    sauce_connect.stdout.on('data', function(data) {\n      console.log('[sauce]', data.toString().replace(/[\\n\\r]/g, ''));\n      if (data.toString().match(/Connected\\! You may start your tests/)) {\n        console.log('=> Saucelabs connected!');\n        callback();\n      }\n    });\n\n    sauce_connect.stderr.on('data', function(data) {\n      console.log('[sauce-err]', data.toString().replace(/[\\n\\r]/g, ''));\n    });\n\n    sauce_connect.on('exit', function(code) {\n      console.log('=> Saucelabs disconnected');\n    });\n  };\n\n  api.startBrowserTests = function(callback) {\n\n    if (!browserConfig.length) {\n      console.log('=> Browser tests complete');\n      return sauceDisconnect(callback);\n    }\n    var config = browserConfig.pop();\n\n    var testFiles = api.findTestFiles().map(function(file) {\n      return file.split('/').pop();\n    }).filter(function(file) {\n      return file !== 'test.auth_replication.js' &&\n        !(file === 'test.attachments.js' && /chrome/.test(config.browserName))\n    });\n\n    var testUrl = launchUrl + '&testFiles=' + testFiles.join(',');\n    var browser = webdriver.remote(sauce.host, sauce.port, sauce.user, sauce.key);\n\n    browser.on('status', function(info) {\n      console.log('\\x1b[36m%s\\x1b[0m', info);\n    });\n\n    browser.on('command', function(meth, path) {\n      console.log(' > \\x1b[33m%s\\x1b[0m: %s', meth, path);\n    });\n\n    resultsDoc.runs[config.name] = {\n      started: new Date()\n    };\n    var doc = resultsDoc.runs[config.name];\n    console.log('=> Starting browser tests:', config.name);\n\n    results.insert(resultsDoc, function(err, body) {\n      resultsDoc._rev = body.rev;\n      browser.chain().init(config).get(testUrl, function() {\n        browser\n          .chain()\n          .waitForElementByCss('.complete', 1000000)\n          .elementByCssSelector('.complete', function(err, el) {\n            browser.getAttribute(el, 'data-results-id', function(err, attr) {\n              browserComplete(attr);\n            });\n          });\n      });\n    });\n\n    function browserComplete(resultsId) {\n      testDb.get(resultsId, function(err, browserDoc) {\n        doc.completed = new Date();\n        doc.report = browserDoc.report;\n        doc.passed = !browserDoc.report.results.failed;\n        results.insert(resultsDoc, function(err, body) {\n          resultsDoc._rev = body.rev;\n          browser.quit(function() {\n            console.log('=> Completed browser tests: ', config.name);\n            api.startBrowserTests(callback);\n          });\n        });\n      });\n    }\n  };\n\n  api.runNodeTests = function(callback) {\n    console.log('=> Starting node tests');\n    resultsDoc.runs.node = {\n      started: new Date()\n    };\n    results.insert(resultsDoc, function(err, body) {\n      resultsDoc._rev = body.rev;\n      qunit.options.timeout = 2000;\n      qunit.setup({\n        log: {\n          summary: true,\n          errors: true\n        }\n      });\n      qunit.run({\n        deps: POUCH_ROOT + '/src/pouch.js',\n        code: POUCH_ROOT + '/src/adapters/pouch.leveldb.js',\n        tests: api.findTestFiles()\n      }, function(err, result) {\n        resultsDoc.runs.node.results = result;\n        resultsDoc.runs.node.completed = new Date();\n        resultsDoc.runs.node.passed = result.failed === 0;\n        results.insert(resultsDoc, function(err, body) {\n          resultsDoc._rev = body.rev;\n          console.log('=> Completed node tests');\n          callback();\n        });\n      });\n    });\n  };\n\n  // Find all the test files in the test directory, these\n  // are files with the name in the format test.name.js\n  api.findTestFiles = function() {\n    return fs.readdirSync(TEST_ROOT).filter(function(name) {\n      return /^test\\.([a-z_])*\\.js$/.test(name);\n    }).map(function(name) {\n      return TEST_ROOT + '/' + name;\n    });\n  };\n\n  api.passed = function() {\n    return Object.keys(resultsDoc.runs).reduce(function(acc, key) {\n      return acc && resultsDoc.runs[key].passed;\n    }, true);\n  };\n\n  return api;\n\n})();\n\nprocess.on('uncaughtException', function(err) {\n  console.log('Tests failed with an uncaught exception: ' + err);\n  sauceDisconnect(function() {\n    process.exit(1);\n  });\n});\n\nfunction initTests(callback) {\n  runMake('min', function() {\n    PouchTestRunner.init(callback);\n  });\n}\n\nfunction testsComplete() {\n  var passed = PouchTestRunner.passed();\n  var passedMsg = passed ? 'PASS!!'.green : 'FAIL'.red;\n  var url = 'http://' + RESULTS_HOST + '/_utils/document.html?' +\n    RESULTS_DB + '/' + resultsDoc._id;\n  resultsDoc.passed = passed;\n  resultsDoc.completed = new Date();\n  results.insert(resultsDoc, function(err, body) {\n    console.log('=> Results stored:', url);\n    console.log('=> Tests complete:', passedMsg);\n    process.exit(passed ? 0 : 1);\n  });\n}\n\nfunction runTests(which) {\n  which = which || 'all';\n  initTests(function() {\n    console.log('=> Running tests:', which);\n    if (which === 'node') {\n      return PouchTestRunner.runNodeTests(testsComplete);\n    }\n    if (which === 'all') {\n      return PouchTestRunner.runNodeTests(function() {\n        PouchTestRunner.sauceConnect(function() {\n          PouchTestRunner.startBrowserTests(testsComplete);\n        });\n      });\n    }\n    if (which === 'browser') {\n      return PouchTestRunner.sauceConnect(function() {\n        PouchTestRunner.startBrowserTests(testsComplete);\n      });\n    }\n  });\n}\n\nfunction runMake(min, callback) {\n  var cmd = 'make' + (min ? ' min' : '');\n  console.log('=> Building:', min ? 'pouch.alpha.min.js' : 'pouch.alpha.js');\n  proc.exec('make min', function(err, stdout, stderr) {\n    if (callback) {\n      callback();\n    }\n  });\n}\n\n// Somewhat pointless currently since it just calls out to\n// make, but in future will likely be using geddy to build.\nprogram\n  .command('make [min]')\n  .description('Make PouchDB')\n  .action(function(min) { runMake(min); });\n\nprogram\n  .command('test [browser|node|all]')\n  .option('--no-store', 'Dont store the results')\n  .option('-R, --release <release>', 'Which release to test')\n  .description('Run tests')\n  .action(runTests);\n\nprogram\n  .command('start-dev')\n  .option('-c, --couch <url>', 'location of CouchDB', String, DEFAULT_COUCH_HOST)\n  .description('Start development servers')\n  .action(function(args) {\n    PouchTestRunner.initServers(url.parse(args.couch));\n  });\n\nprogram\n  .version('0.0.1')\n  .option('-v, --verbose', 'Verbose output')\n  .parse(process.argv);\n\nif (!program.args.length) {\n  program.help();\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":10353}]],"length":10353}
