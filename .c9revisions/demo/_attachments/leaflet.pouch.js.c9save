{"ts":1366911337021,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\r\n\r\n  L.GeoJSON.Pouch = L.GeoJSON.extend({\r\n    defaultParams: {\r\n      continuous: true,\r\n      direction: \"from\"\r\n    },\r\n    initialize: function(remoteDB, opts) {\r\n      var db, i, parts, pouchParams,\r\n        _this = this;\r\n      this._orig = [remoteDB, opts];\r\n      if (typeof remoteDB === \"object\") {\r\n        opts = remoteDB;\r\n        remoteDB = void 0;\r\n      }\r\n      if (remoteDB) {\r\n        if (remoteDB.slice(0, 4) !== \"http\") {\r\n          db = remoteDB;\r\n          remoteDB = void 0;\r\n        } else if (remoteDB.slice(0, 4) === \"http\") {\r\n          if (opts && opts.idbName) {\r\n            db = opts.idbName;\r\n          } else {\r\n            parts = remoteDB.split(\"/\");\r\n            db = parts.pop();\r\n            while (db === \"\") {\r\n              db = parts.pop();\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (opts && opts.idbName) {\r\n          db = opts.idbName;\r\n        } else {\r\n          parts = location.href.split(\"/\");\r\n          db = parts.pop();\r\n          while (db === \"\") {\r\n            db = parts.pop();\r\n          }\r\n        }\r\n      }\r\n      this._layers = {};\r\n      this._dbName = db;\r\n      pouchParams = L.Util.extend({}, this.defaultParams);\r\n      for (i in opts) {\r\n        if (pouchParams.hasOwnProperty(i)) {\r\n          pouchParams[i] = opts[i];\r\n        }\r\n      }\r\n      this.pouchParams = pouchParams;\r\n      L.Util.setOptions(this, opts);\r\n      return Pouch(this._dbName, function(e1, db1) {\r\n        if (!e1) {\r\n          _this.localDB = db1;\r\n          _this.localDB.changes({\r\n            continuous: _this.pouchParams.continuous,\r\n            include_docs: true,\r\n            onChange: function(c) {\r\n              var doc;\r\n              doc = c.doc;\r\n              if (parseInt(doc._rev.slice(0, 1)) === 1) {\r\n                if (\"geometry\" in doc) {\r\n                  _this.addData(doc);\r\n                }\r\n              } else if (parseInt(doc._rev.slice(0, 1)) > 1) {\r\n                _this.eachLayer(function(f) {\r\n                  if (f.feature._id === doc._id) {\r\n                    return _this.removeLayer(f);\r\n                  }\r\n                });\r\n                if (\"geometry\" in doc) {\r\n                  if (!doc._deleted) {\r\n                    _this.addData(doc);\r\n                  }\r\n                }\r\n              }\r\n              return true;\r\n            }\r\n          });\r\n          if (remoteDB) {\r\n            _this.remoteDB = remoteDB;\r\n            _this.sync = function(cb) {\r\n              var noOpt, options;\r\n              options = {\r\n                continuous: this.pouchParams.continuous\r\n              };\r\n              switch (this.pouchParams.direction) {\r\n                case \"from\":\r\n                  this._from = Pouch.replicate(this.localDB, this.remoteDB, options);\r\n                  break;\r\n                case \"to\":\r\n                  this._to = Pouch.replicate(this.remoteDB, this.localDB, options);\r\n                  break;\r\n                case \"both\":\r\n                  this._from = Pouch.replicate(this.localDB, this.remoteDB, options);\r\n                  this._to = Pouch.replicate(this.remoteDB, this.localDB, options);\r\n                  break;\r\n                default:\r\n                  noOpt = true;\r\n              }\r\n              if (cb) {\r\n                if (!noOpt) {\r\n                  cb(null, true);\r\n                }\r\n                if (noOpt) {\r\n                  return cb(\"No Option\");\r\n                }\r\n              }\r\n            };\r\n            return _this.sync();\r\n          }\r\n        } else if (remoteDB) {\r\n          return Pouch(remoteDB, function(e3, db3) {\r\n            if (!e3) {\r\n              _this.localDB = db3;\r\n              return _this.localDB.changes({\r\n                continuous: _this.pouchParams.continuous,\r\n                include_docs: true,\r\n                onChange: function(c) {\r\n                  var doc;\r\n                  doc = c.doc;\r\n                  if (parseInt(doc._rev.slice(0, 1)) === 1) {\r\n                    if (\"geometry\" in doc) {\r\n                      _this.addData(doc);\r\n                    }\r\n                  } else if (parseInt(doc._rev.slice(0, 1)) > 1) {\r\n                    _this.eachLayer(function(f) {\r\n                      if (f.feature._id === doc._id) {\r\n                        return _this.removeLayer(f);\r\n                      }\r\n                    });\r\n                    if (\"geometry\" in doc) {\r\n                      if (!doc._deleted) {\r\n                        _this.addData(doc);\r\n                      }\r\n                    }\r\n                  }\r\n                  return true;\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    },\r\n    addDoc: function(doc, cb) {\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      if (\"type\" in doc && doc.type === \"Feature\") {\r\n        if (!(\"_id\" in doc)) {\r\n          return this.localDB.post(doc, cb);\r\n        } else if (\"_id\" in doc && doc._id.slice(0, 8) !== \"_design/\") {\r\n          return this.localDB.put(doc, cb);\r\n        }\r\n      } else if (\"type\" in doc && doc.type === \"FeatureCollection\") {\r\n        return this.localDB.bulkDocs(doc.features, cb);\r\n      } else if (doc.length) {\r\n        return this.localDB.bulkDocs(doc, cb);\r\n      }\r\n    },\r\n    getDoc: function(id, cb) {\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      return this.localDB.get(id, cb);\r\n    },\r\n    deleteDoc: function(id, cb) {\r\n      var _this = this;\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      return this.getDoc(id, function(err, doc) {\r\n        if (!err) {\r\n          _this.localDB.remove(doc, cb);\r\n        }\r\n        if (err) {\r\n          return cb(\"err\");\r\n        }\r\n      });\r\n    },\r\n    cancel: function(cb) {\r\n      switch (this.pouchParams.direction) {\r\n        case \"from\":\r\n          this._from.cancel();\r\n          break;\r\n        case \"to\":\r\n          this._to.cancel();\r\n          break;\r\n        case \"both\":\r\n          this._from.cancel();\r\n          this._to.cancel();\r\n      }\r\n      return cb(null, true);\r\n    },\r\n    destroy: function(cb) {\r\n      if (cb == null) {\r\n        cb = function() {\r\n          return true;\r\n        };\r\n      }\r\n      return Pouch.destroy(this._dbName, cb);\r\n    }\r\n  });\r\n\r\n  L.geoJson.pouch = function(remoteDB, opts) {\r\n    return new L.GeoJSON.Pouch(remoteDB, opts);\r\n  };\r\n\r\n}).call(this);\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6546}]],"length":6546}
