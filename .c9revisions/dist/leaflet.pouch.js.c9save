{"ts":1353701623236,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n\n  L.GeoJSON.Pouch = L.GeoJSON.extend({\n    defaultParams: {\n      continuous: true,\n      direction: \"from\"\n    },\n    initialize: function(db, remoteDB, opts) {\n      var i, pouchParams,\n        _this = this;\n      if (typeof remoteDB === \"object\") {\n        opts = remoteDB;\n        remoteDB = void 0;\n      }\n      this._layers = {};\n      pouchParams = L.Util.extend({}, this.defaultParams);\n      for (i in opts) {\n        if (this.pouchParams.hasOwnProperty(i)) {\n          pouchParams[i] = opts[i];\n        }\n      }\n      this.pouchParams = pouchParams;\n      L.Util.setOptions(this, opts);\n      return Pouch(db, function(e1, db1) {\n        if (!e1) {\n          _this.localDB = db1;\n          _this.localDB.changes({\n            continuous: _this.pouchParams.continuous,\n            include_docs: true,\n            onChange: function(c) {\n              var doc;\n              doc = c.doc;\n              if (parseInt(doc._rev.slice(0, 1)) === 1) {\n                _this.addData(doc);\n              } else if (parseInt(doc._rev.slice(0, 1)) > 1) {\n                _this.eachLayer(function(f) {\n                  if (f.feature._id === doc._id) {\n                    return _this.removeLayer(f);\n                  }\n                });\n                if (!doc._deleted) {\n                  _this.addData(doc);\n                }\n              }\n              return true;\n            }\n          });\n          if (remoteDB) {\n            return Pouch(remoteDB, function(e2, db2) {\n              if (!e2) {\n                _this.remoteDB = db2;\n                _this.sync = function(cb) {\n                  var noOpt, options;\n                  options = {\n                    continuous: this.pouchParams.continuous\n                  };\n                  switch (this.pouchParams.direction) {\n                    case \"from\":\n                      this._from = this.localDB.replicate.from(this.remoteDB, options);\n                      break;\n                    case \"to\":\n                      this._to = this.localDB.replicate.to(this.remoteDB, options);\n                      break;\n                    case \"both\":\n                      this._from = this.localDB.replicate.from(this.remoteDB, options);\n                      this._to = this.localDB.replicate.to(this.remoteDB, options);\n                      break;\n                    default:\n                      noOpt = true;\n                  }\n                  if (cb) {\n                    if (!noOpt) {\n                      cb(null, true);\n                    }\n                    if (noOpt) {\n                      return cb(\"No Option\");\n                    }\n                  }\n                };\n                return _this.sync();\n              }\n            });\n          }\n        }\n      });\n    },\n    addDoc: function(doc, cb) {\n      if (\"type\" in doc && doc.type === \"Feature\") {\n        this.localDB.post(doc, cb || function() {\n          if (!(\"_id\" in doc)) {\n            return true;\n          }\n        });\n        return this.localDB.put(doc, cb || function() {\n          if (\"_id\" in doc && doc._id.slice(0, 8) !== \"_design/\") {\n            return true;\n          }\n        });\n      } else if (\"type\" in doc && doc.type === \"FeatureCollection\") {\n        return this.localDB.bulkDocs(doc.features, cb || function() {\n          return true;\n        });\n      } else if (doc.length) {\n        return this.localDB.bulkDocs(doc, cb || function() {\n          return true;\n        });\n      }\n    },\n    deleteDoc: function(id, cb) {\n      var _this = this;\n      return this.localDB.get(id, function(err, doc) {\n        if (!err) {\n          _this.localDB.remove(doc, cb);\n        }\n        if (err) {\n          return cb(\"err\");\n        }\n      });\n    },\n    cancel: function(cb) {\n      switch (this.pouchParams.direction) {\n        case \"from\":\n          this._from.cancel();\n          break;\n        case \"to\":\n          this._to.cancel();\n          break;\n        case \"both\":\n          this._from.cancel();\n          this._to.cancel();\n      }\n      return cb(null, true);\n    }\n  });\n\n  L.geoJson.pouch = function(db, remoteDB, opts) {\n    return new L.GeoJSON.Pouch(db, remoteDB, opts);\n  };\n\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":4221}]],"length":4221}
