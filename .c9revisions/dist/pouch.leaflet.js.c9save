{"ts":1353440709025,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n\n  L.GeoJSON.Pouch = L.GeoJSON.extend({\n    defaultParams: {\n      continuous: true,\n      direction: \"from\"\n    },\n    initialize: function(db, remoteDB, opts) {\n      var i, pouchParams,\n        _this = this;\n      if (typeof remoteDB === \"object\") {\n        opts = remoteDB;\n        remoteDB = void 0;\n      }\n      this._layers = {};\n      pouchParams = L.Util.extend({}, this.defaultAJAXparams);\n      for (i in opts) {\n        if (this.pouchParams.hasOwnProperty(i)) {\n          pouchParams[i] = opts[i];\n        }\n      }\n      this.pouchParams = pouchParams;\n      L.Util.setOptions(this, opts);\n      return Pouch(db, function(e1, db1) {\n        if (!e1) {\n          _this.localDB = db1;\n          _this.localDB.changes({\n            continuous: _this.pouchParams.continuous,\n            include_docs: true,\n            onChange: function(c) {\n              var doc;\n              doc = c.doc;\n              if (parseInt(doc._rev.slice(0, 1)) === 1) {\n                _this.addData(doc);\n              } else if (parseInt(doc._rev.slice(0, 1)) > 1) {\n                _this.eachLayer(function(f) {\n                  if (f.feature._id === doc._id) {\n                    return _this.removeLayer(f);\n                  }\n                });\n                if (!doc._deleted) {\n                  _this.addData(doc);\n                }\n              }\n              return true;\n            }\n          });\n          if (remoteDB) {\n            return Pouch(remoteDB, function(e2, db2) {\n              var options;\n              if (!e2) {\n                _this.remoteDB = db2;\n                options = {\n                  continuous: _this.pouchParams.continuous\n                };\n                switch (_this.pouchParams.direction) {\n                  case \"from\":\n                    return _this.localDB.replicate.from(_this.remoteDB, options);\n                  case \"to\":\n                    return _this.localDB.replicate.to(_this.remoteDB, options);\n                  case \"both\":\n                    _this.localDB.replicate.from(_this.remoteDB, options);\n                    return _this.localDB.replicate.to(_this.remoteDB, options);\n                  default:\n                    return console.log(\"you sure about that?\");\n                }\n              }\n            });\n          }\n        }\n      });\n    },\n    addDoc: function(doc, cb) {\n      return this.localDB.post(doc, cb || function() {\n        return true;\n      });\n    },\n    deleteDoc: function(id) {\n      var _this = this;\n      return this.localDB.get(id, function(err, doc) {\n        return _this.localDB.remove(doc, function() {\n          if (!err) {\n            return true;\n          }\n        });\n      });\n    }\n  });\n\n  L.geojson.pouch = function(db, remoteDB, opts) {\n    return new L.GeoJSON.Pouch(db, remoteDB, opts);\n  };\n\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":2850}]],"length":2850}
